if (Meteor.isServer) {
  Meteor.startup(function() {
    var functionIsUnprotected, regularyCheckHandlerForPermissions, updateMethodAndInsertPermissionSnippet;
    functionIsUnprotected = function(func) {
      return !(String(func).indexOf('void 0 : void 0) !== -1 || (userDoc != null ? (ref1 = userDoc.roles) != null ? ref1.indexOf("admin")') > -1);
    };
    updateMethodAndInsertPermissionSnippet = function(func, name, enabled, handler, endpoints, handlername) {
      var newFunc;
      console.log('endpoints[name]', endpoints[name]);
      console.log('name', name);
      if (enabled && name.indexOf('/__dummy_coll_') === -1) {
        if (!endpoints.hasOwnProperty(name)) {
          throw new Meteor.Error('Detected an issue with method permissions, please revise configuration of endpoint: ' + name);
        } else {
          newFunc = function() {
            var ref, ref1, userDoc;
            if (endpoints[name] === 'none') {
              return func.apply(this, arguments);
            } else {
              if (handlername === "methods") {
                userDoc = typeof Meteor !== "undefined" && Meteor !== null ? Meteor.user() : void 0;
              }
              if (handlername === "publications") {
                userDoc = typeof Meteor !== "undefined" && Meteor !== null ? Meteor.users.findOne(this.userId) : void 0;
              }
              if ((userDoc != null ? (ref = userDoc.roles) != null ? ref.indexOf(endpoints[name]) : void 0 : void 0) !== -1 || (userDoc != null ? (ref1 = userDoc.roles) != null ? ref1.indexOf("admin") : void 0 : void 0) !== -1) {
                return func.apply(this, arguments);
              } else {
                throw new Meteor.Error('403 Not permitted');
              }
            }
          };
          return handler[name] = newFunc;
        }
      }
    };
    regularyCheckHandlerForPermissions = function(handler, endpoints, enabled, handlername) {
      _.each(handler, function(func, name) {
        return updateMethodAndInsertPermissionSnippet(func, name, enabled, handler, endpoints, handlername);
      });
      if (typeof handler === 'object' && handler !== null) {
        return Object.observe(handler, function(changes) {
          return _.each(changes, function(change) {
            if (typeof change.object[change != null ? change.name : void 0] === 'function' && functionIsUnprotected(change.object[change != null ? change.name : void 0])) {
              return updateMethodAndInsertPermissionSnippet(change.object[change != null ? change.name : void 0], change != null ? change.name : void 0, enabled, handler, endpoints, handlername);
            }
          });
        });
      }
    };
    regularyCheckHandlerForPermissions(Meteor.server.method_handlers, methodConfiguration.methods, methodConfiguration.enabled, 'methods');
    regularyCheckHandlerForPermissions(Meteor.server.publish_handlers, publicationConfiguration.methods, publicationConfiguration.enabled, 'publications');
    return 0;
  });
}

// ---
// generated by coffee-script 1.9.2
